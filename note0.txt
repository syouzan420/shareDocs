OutToCanvas.hs
+++
import Haste.Graphics.Canvas(Canvas,Color(RGB),Bitmap,Point,color,font,translate
                            ,rotate,text,draw,scale,render,renderOnTop
                            ,opacity,lineWidth,stroke,path)
import Data.List (transpose)
import Data.Bifunctor (bimap)

drawTouched :: Canvas -> CInfo -> [[Pos]] -> IO ()
drawTouched c ci cds = do 
  let tcds = transpose cds
  let todb = map (bimap fromIntegral fromIntegral)
  mapM_ (drawPath c ci . todb) tcds

drawPath :: Canvas -> CInfo -> [Point] -> IO ()
drawPath c _ pos = renderOnTop c $ 
  opacity 0.5 $ color (chColors!!3) $ lineWidth 10 $ stroke $ path pos 

Loop.hs
>>>

timerEvent :: Canvas -> CInfo -> Bmps -> State -> IO State
timerEvent c ci bmps st = do
  let ticSt = tic st
      sw = swc st
      t = if ticSt > 298 then 0 else ticSt+1
      nst = st{tic=t}
  drawUpdate c ci bmps nst 

drawUpdate :: Canvas -> CInfo -> Bmps -> State -> IO State 
drawUpdate c ci bmps st = do
  let tcs = tccs st
  drawTouched c ci tcs 
  return st

